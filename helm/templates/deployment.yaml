apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  strategy:
    type: RollingUpdate
  progressDeadlineSeconds: 160
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      containers:
        - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          name: {{ .Chart.Name }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: TEST_LOAD
              value: {{ .Values.test.simulateHeavyLoad }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          # Testing the heavy load: if test flag TEST_LOAD is true, should handle the situation.
          {{- if .Values.probes.enabled }}
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /health
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.probes.initialDelaySeconds }}
            periodSeconds: 5
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /health
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.probes.initialDelaySeconds }}
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          startupProbe:
            httpGet:
              scheme: HTTP
              path: /health
              port: {{ .Values.service.targetPort }}
            failureThreshold: 5
            periodSeconds: 10
            initialDelaySeconds: {{ .Values.probes.initialDelaySeconds }}
          {{- end }}
